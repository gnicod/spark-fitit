/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fitit;
import com.garmin.fit.*;
import com.github.filosganga.geogson.gson.FeatureAdapter;
import com.github.filosganga.geogson.gson.GeometryAdapterFactory;
import com.github.filosganga.geogson.model.Coordinates;
import com.github.filosganga.geogson.model.Feature;
import com.github.filosganga.geogson.model.Geometry;
import com.github.filosganga.geogson.model.LineString;
import com.github.filosganga.geogson.model.positions.LinearPositions;
import com.github.filosganga.geogson.model.positions.Positions;
import com.github.filosganga.geogson.model.positions.SinglePosition;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import spark.Request;
import static spark.Spark.*;

public class App {

    public static String getGreeting(Request request) {
        Gson gson = new GsonBuilder()
                .registerTypeAdapterFactory(new GeometryAdapterFactory())
                .create();
        String gsjon = request.body();


        Gson toTest = new GsonBuilder().registerTypeAdapterFactory(new GeometryAdapterFactory()).create();
        Feature feature = toTest.fromJson(gsjon, Feature.class);


        /*Geometry geometry = new GsonBuilder()
                .registerTypeAdapterFactory(new GeometryAdapterFactory())
                .create()
                .fromJson(gsjon, LineString.class);
         */
        Geometry geometry = feature.geometry();
        FileEncoder encode;

        try {
            encode = new FileEncoder(new java.io.File("ExampleCourse.fit"), Fit.ProtocolVersion.V2_0);
        } catch (FitRuntimeException e) {
            System.err.println("Error opening file ExampleActivity.fit");
            return "error";
        }

        //Generate FileIdMessage
        FileIdMesg fileIdMesg = new FileIdMesg(); // Every FIT file MUST contain a 'File ID' message as the first message
        fileIdMesg.setManufacturer(Manufacturer.DEVELOPMENT);
        fileIdMesg.setType(File.COURSE);
        fileIdMesg.setProduct(1);
        fileIdMesg.setSerialNumber(12345L);
        encode.write(fileIdMesg); // Encode the FileIDMesg

        byte[] appId = new byte[]{
                0x1, 0x1, 0x2, 0x3,
                0x5, 0x8, 0xD, 0x15,
                0x22, 0x37, 0x59, (byte) 0x90,
                (byte) 0xE9, 0x79, 0x62, (byte) 0xDB
        };

        DeveloperDataIdMesg developerIdMesg = new DeveloperDataIdMesg();
        for (int i = 0; i < appId.length; i++) {
            developerIdMesg.setApplicationId(i, appId[i]);
        }
        developerIdMesg.setDeveloperDataIndex((short)0);
        encode.write(developerIdMesg);

        CourseMesg courseMesg = new CourseMesg();
        courseMesg.setName("course name");
        courseMesg.setSport(Sport.HIKING);
        encode.write(courseMesg);
        LinearPositions lp = (LinearPositions) geometry.positions();
        for (SinglePosition sp : lp.children()){
            CoursePointMesg cp = new CoursePointMesg();
            Coordinates coordinates = sp.coordinates();
            cp.setPositionLat((int) (coordinates.getLat() * 11930465));
            cp.setPositionLong((int) (coordinates.getLon() * 11930465));
            encode.write(cp);
        }
        try {
            encode.close();
        } catch (FitRuntimeException e) {
            System.err.println("Error closing encode.");
            return "error";
        }

        System.out.println("Encoded FIT file ExampleActivity.fit.");
        return "Hello World!";
    }

    public static void main(String[] args) {
        post("/", (req, res) -> getGreeting(req));
    }
}
